// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.css
// static/main.js
// init.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x57\xdb\xba\x12\x7e\xe7\x57\xa8\x7a\x6a\x17\xdb\x56\x42\x28\x97\xae\x38\x6b\xa5\xe5\x72\x0a\xa7\x1c\x2e\x9b\x42\xf7\x9b\x62\x4d\x62\x25\xb6\xe4\x4a\x63\x93\x1c\x16\xff\x7d\x2f\xd9\x09\x71\x1c\x87\x52\xda\x97\x48\xaa\xf5\xcd\x7c\xdf\x68\x34\x1a\xba\xef\x84\x0e\x71\x96\x02\x89\x30\x89\x7b\x5b\xdd\xf2\x67\xab\x1b\x01\x17\xbd\x2d\x42\x08\xe9\xbe\xf3\x3c\xf2\x59\x6b\x8b\x86\xa7\xc4\xf3\xe6\xab\x09\x20\x27\x61\xc4\x8d\x05\x0c\x68\x86\x43\xef\x80\x56\xff\x4b\xf1\x04\x02\x9a\x4b\x78\x48\xb5\x41\x4a\x42\xad\x10\x14\x06\xf4\x41\x0a\x8c\x02\x01\xb9\x0c\xc1\x2b\x26\x7f\x11\xa9\x24\x4a\x1e\x7b\x36\xe4\x31\x04\xed\xbf\x88\x8d\x8c\x54\x13\x0f\xb5\x37\x94\x18\x28\xbd\x80\x8e\xa5\x9a\x10\x03\x71\x40\x2d\xce\x62\xb0\x11\x00\x52\x12\x19\x18\x06\x34\x42\x4c\xed\x27\xc6\x12\x3e\x0d\x85\xf2\x07\x5a\x63\xe1\xb3\x9b\x84\x3a\x61\xcf\x0b\x6c\xd7\x6f\xf9\x2d\x16\x5a\xbb\x5c\xf3\x13\xa9\xfc\xd0\x5a\x4a\xa4\x42\x18\x19\x89\xb3\x80\xda\x88\x77\x0e\x76\xbd\x53\xf5\xb1\x73\xb0\x3b\xfd\x79\xd5\xe6\xfa\xee\xbe\xbf\xdd\xfa\x78\x70\x7d\x7f\x39\xbd\x1c\xed\x0d\x67\xbb\x5f\xef\xf2\xbf\x2f\xa2\xd6\xf1\xce\x5e\xe7\x3e\x39\x09\xcf\xe2\x9b\xfe\x83\x3c\x1d\x9d\xf4\xef\x98\xe8\xcb\x9b\xbd\xb3\xfb\x84\x16\xbe\xbb\x7f\xa1\xd1\xd6\x6a\x23\x47\x52\x05\x94\x2b\xad\x66\x89\xce\x2c\xed\x6d\xbd\xc4\xce\x85\x27\xa0\x08\x53\x64\x85\x83\x25\x5b\x96\xf0\xb9\xc7\x73\x69\x50\x62\x0c\xbd\xcf\x99\x18\x01\x92\xbf\x0d\x0f\x27\x60\xba\xac\x5c\xdd\xea\xb2\x32\xa0\x5b\xdd\x81\x16\xb3\xf9\x0e\x21\x73\x12\xc6\xdc\xda\x80\xba\xe8\x70\xa9\xc0\x10\x8b\xdc\x20\x18\x0f\x21\x49\x63\x8e\x30\x87\x7f\xde\x20\x45\x40\x79\x9a\xd2\xc5\x4e\x37\x5e\x7e\x52\x7c\x66\x74\xe6\x10\x5c\xec\x49\xee\x0d\xa4\x12\x9f\x78\x86\x11\x28\x94\x21\x47\x70\x00\xd5\x29\xed\x75\x59\x65\x4b\xc5\x1e\x13\x32\x9f\xfb\x5a\x0e\xbb\xac\x74\x7f\xab\x6b\x43\x23\x53\xac\x6a\x33\x5d\xba\x5c\x38\x19\xe9\x04\x52\x3e\x5a\x10\x28\x9c\xcf\xbd\x30\xd6\x7c\x52\xa3\x94\x7b\x72\x18\xd0\x77\x35\xa7\x1a\x39\x15\x11\x42\x1d\x50\x16\x6a\x3d\x91\x40\x7b\xc7\x0a\xc1\x90\x94\x5b\xfb\xa0\x8d\x78\x66\xe2\x3e\x6c\x64\x52\xb3\xfa\xa2\xd1\x41\x11\x4c\x4f\x48\x9b\xc6\x7c\xd6\xeb\xb2\xda\xc2\xea\xd7\x91\x61\xb5\x15\x34\x5c\x59\x1e\xa2\xd4\xca\x93\x2a\xcd\xb0\xd7\x65\xeb\x6b\xbf\x81\x62\x57\x01\xec\xcb\xb1\x2a\x63\xf4\xba\x68\x95\xcc\x2a\xb1\xaa\xa9\x35\x3f\x6d\x82\xcb\x78\x56\x93\xe9\xf1\xb1\x58\x7d\x7a\x22\xc7\xb7\xd7\x2f\x4a\x3e\x07\x49\xb4\xc2\x68\x0d\xa6\x84\x1a\xf0\x98\xab\x10\x4a\x30\x32\xd4\x86\x3c\x3e\x1a\x70\xb9\x26\xd5\xe8\x88\xcf\xec\xd3\x13\x11\x7c\xf6\xde\x7e\x58\x15\xe9\x0f\xe9\x57\x45\xdd\x2c\xc2\xe2\xa0\x86\x28\x73\xa0\x24\xf7\xb4\xfa\x14\xc6\x32\x9c\x04\xb4\x5c\x23\x01\x41\x93\x01\x5d\xa6\x75\xec\x4d\xad\xd7\xde\x21\xc8\x07\x31\x78\x83\x0c\x51\xab\x1a\xf1\x2f\x0e\x81\x44\x60\x80\xa0\x26\x36\xd2\x0f\xa4\xea\xce\x46\x45\x0b\xc8\x85\xa5\x62\x42\x17\x87\xba\x74\xb0\x7e\x8e\xdc\x15\xf4\xfc\xbd\x9b\x78\xb1\x1c\x45\xd8\x10\x87\x2e\x9a\xf5\xc5\x39\xc8\x33\x02\x4c\xd1\x8b\x61\x88\x84\x2c\x68\xd2\xde\x11\x47\xe8\x32\x8c\xde\xb2\xbb\x45\x7b\x47\x50\x86\x4a\x6a\xf5\x7a\x14\xe3\x48\x54\x7c\xe8\x27\x3a\x53\xd8\xbc\xdf\xa5\x4f\x4d\x16\x86\xcb\x5a\xbb\x34\xb1\xbc\xa6\x6b\xba\x90\xdc\x1b\x6a\x13\x50\x74\x55\x53\xc0\x94\x48\x45\x1a\x4e\xcf\xfa\x4e\xf1\xa2\x70\x8f\x8f\x23\xc0\x13\x6d\x12\x8e\x08\xc2\xc9\xf8\x5e\xc1\x03\x29\x06\xe8\xa3\x4c\xc0\x22\x4f\xd2\x0f\x1f\x9e\x9e\xba\x0c\xc5\x5b\x8c\xb4\x9c\x15\xf4\xc5\x52\xe3\xdf\xc1\xaa\xab\xec\xa0\x78\xa1\xf4\x26\x94\x46\xad\x57\x75\xed\xb2\xe2\xdc\xf6\xdc\xb8\x92\xbc\x84\xbc\x3d\x7d\xcb\x4b\x75\x91\xc3\x43\x6d\x92\x32\x4f\x6d\x36\x48\x24\xfa\xa9\x81\xbc\x78\x06\x2d\x72\xc5\xe5\x5b\xbd\xc6\xce\x79\xbb\xcd\xde\xc8\xe8\x6c\xad\xc2\x16\x36\x48\x1a\xf3\x10\x22\x1d\x0b\x30\x01\x2d\xeb\x50\x45\x5c\x4a\x8a\x77\x42\xe9\x0e\x31\xf0\x33\x93\x06\x0a\x5f\x2b\x17\x44\x61\xc2\x15\x7f\xa3\xe3\xea\x4b\xc3\x79\x97\x68\xe1\x9e\x22\x2b\x90\x3c\x43\x3d\xd4\x61\x66\x8b\xca\x55\x0e\xe9\xcb\x75\xee\x2d\x64\xca\x14\xa2\xc4\x22\xa4\x01\x6d\xf9\xad\x36\x25\xbf\x43\x41\x65\xc9\x00\x4c\x85\x04\x9f\x03\xae\x58\x69\xf9\xad\xd6\xeb\x9c\x1f\xa0\x6a\xf6\xbd\xbc\x50\x57\x6e\x62\x9b\x0d\xde\x7f\xa0\x95\x9d\xc4\xed\x9e\xc6\xc5\x8f\xe0\x6a\xe4\x1c\x2b\xdd\x2c\xcf\x04\x25\x39\x8f\x33\x08\xa8\x47\x7b\x9e\xab\xf1\x0e\xf2\xd7\x76\xb8\x10\x0d\x76\x6c\x16\x86\xe0\x5e\x89\x8d\x16\xb6\x69\x6f\x7b\xdd\x42\x9d\x38\x73\x92\xfe\x6e\x05\x2b\xdf\x43\x2b\xa7\xff\x17\x19\x50\xce\xbf\x94\xef\x28\xb2\x12\x4e\xa9\x62\xa9\xd6\x0a\x48\x25\x20\x85\x99\x32\x24\x24\x19\x78\x3b\x24\x31\x9e\x4d\xbc\x9d\xa6\x5a\xb2\x31\x59\x2c\x84\x06\xfe\x28\x37\x16\x08\xbf\x48\x8b\x06\x91\xab\x51\x5d\x0d\x55\x73\x40\x0b\x96\xb4\x77\x53\x7c\xd4\x14\xc2\xf5\x98\xad\xf5\x6d\x8b\x28\x5a\x13\x2e\xbb\xa5\x50\x0b\xf0\xc7\x3f\x33\x30\xb3\xa2\x4b\x2a\x87\x5e\xc7\xdf\xf1\xdb\xbe\x8d\x65\x52\x74\x46\xe3\xc6\xc6\xe8\xfc\xac\xa3\x77\x8e\xce\xf1\xeb\x24\xff\xf1\xf5\xbc\x73\x7b\x7c\xf1\xff\xe4\xdb\xfe\xf9\x97\xc9\xb5\x61\xe6\xf8\x90\x5d\xa5\xa3\x3d\xde\xff\xe7\xf4\xec\xe1\xe4\xe8\xdb\xf7\x8b\x3e\x3b\x4d\x4f\x4f\x4e\x0e\x3b\xd1\x7d\x7a\xfa\xf1\x7c\x72\x51\x36\x46\x9b\x9a\xa2\x25\x97\x66\xc7\x85\x1a\x5b\x3f\x8c\x75\x26\x86\x31\x37\x50\x78\xcf\xc7\x7c\xca\x62\x39\xb0\x2c\xd5\x69\x0a\xc6\x1f\x5b\xd6\xf6\xdb\x3b\xfe\x21\xcb\x12\xb1\x58\xdc\xcc\xa8\x9f\x5e\x0c\x46\xd1\xe1\xe7\xed\x1f\xed\xab\x73\xcc\x3b\xd7\x6a\xff\xae\x93\x8c\x2e\xa7\xd1\xed\xe1\x39\xbb\x09\xaf\x6c\xff\x72\x3f\xba\x95\x83\xfb\xce\xe1\x78\x7f\xc8\x27\x27\x97\x76\x92\xdf\x67\x36\x1f\xf2\xd6\x60\xf7\xea\x8f\x18\xbd\xb6\x71\x1d\xd7\xfb\xd6\x66\x2e\x67\xff\x5c\xef\xdd\xa4\x30\x8e\x76\x6f\x5b\x3b\xe2\x60\xfc\x3f\xdc\xcb\xff\x7b\xfc\x9f\x21\xb0\xb3\xab\x53\x79\x7d\x7d\x73\x75\x35\xbd\x19\x9e\xdc\xa5\xb2\xfd\xed\x67\xf6\x5d\xf4\x67\xe3\x5b\x6e\x3e\x6e\xef\xef\x5d\x7e\xff\x92\xfc\x88\x5f\xcb\x65\x63\x78\xfc\xb1\x15\x10\xcb\xdc\xf8\x0a\x90\xa9\x34\x61\x79\x06\xbf\x54\x21\x53\xe9\x64\x54\xf0\xce\x33\xf0\xca\x76\x8a\x09\x69\xb1\x32\x77\x8c\x5f\x8f\xc3\xa7\x52\xdb\x12\xa2\x18\x2e\x34\xdb\x84\x50\xb6\xd6\xe3\x1a\x49\x56\xfc\x69\xe4\xdf\x00\x00\x00\xff\xff\x65\x4a\xe5\x3f\x31\x11\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 4401, mode: os.FileMode(420), modTime: time.Unix(1522988449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x7e\x0a\xc2\xbb\x05\x56\xea\x74\x4d\x83\xca\xd8\x80\x6e\xd8\xb0\x1d\xb6\xc3\x82\x9d\x8a\x1e\x64\x9b\x76\xb4\x48\xa2\x20\xd3\x6d\xdc\x20\xef\x3e\x38\x71\xdc\xb4\x5d\x76\xb3\xc9\x9f\x9f\x7e\x8a\xd4\xdd\x83\x28\x0c\xa9\xf5\x3d\x7c\x84\x09\x6c\xa1\xd4\x8d\x37\xaa\x93\x8e\x1c\x66\xb0\x8b\xa2\x55\x80\x6d\x04\x00\x90\x53\x28\x31\x48\x98\xf9\x0d\x34\x64\x74\x09\x46\xd7\x2b\xce\x4d\x8b\x59\xb4\x8b\xa2\x69\xa9\xb4\xe9\x06\x71\x45\x8e\x45\xa3\x9f\x50\xc2\x55\xea\x37\xd9\x3e\xc8\xb8\x61\xa1\x8c\xae\x9d\x84\x02\x1d\x63\x38\xc4\x2f\x26\xe0\x55\x59\x6a\x57\x4b\x98\xf5\x6a\x98\x5c\xec\x89\x96\x1c\xaf\x46\xe6\xb9\xf2\x82\x0c\x05\x09\x75\x50\xdd\xc1\x48\xc3\x2a\x30\x06\xc1\x68\xbd\x51\x8c\x43\xfd\x78\xc6\xfb\x80\x16\x66\xd3\x79\x40\x7b\xde\x58\x0f\xca\xd9\x89\x8d\x79\x5d\x9e\xfa\xcd\xbe\xa9\xf1\xe3\x20\x36\x58\xf1\x3f\x9c\xf6\xe1\x5e\x00\x10\x4d\x59\xe5\x06\x45\xde\x32\x93\x1b\xa4\x83\xf9\x77\x57\x37\xf3\x74\xbe\x38\xd8\xc9\x55\xb1\xae\x03\xb5\xae\x14\xc7\x34\xde\x60\x81\x55\x76\x32\x88\x31\x55\x22\x5e\xe2\x75\xf6\xfa\xda\x67\xd7\xc7\x6b\x1f\x8d\x4f\x17\xcf\x2d\x0f\x90\x9c\x98\xc9\x4a\xb8\x1c\x87\xfa\x82\x37\xa8\x98\xfc\x59\xc9\xfe\xc8\x4a\x59\x6d\x3a\x09\x42\x79\x6f\x50\x34\x5d\xc3\x68\x93\x4f\x46\xbb\xf5\x0f\x55\x2c\xf7\xbf\x5f\xc9\x71\x12\x2f\xb1\x26\x84\xdf\xdf\xe3\xe4\x17\xe5\xc4\x94\xc4\xdf\xd0\x3c\x20\xeb\x42\xc1\x4f\x6c\x31\x4e\x6e\x83\x56\x26\x69\x94\x6b\x44\x83\x41\x57\x49\x7c\xdb\x43\xe1\x73\xdf\x2f\x7c\xb1\xf4\x47\xc7\xcf\x9c\xb7\x81\x65\x67\x73\x32\xf1\x89\xbb\x47\xec\x17\x55\xc2\x22\x4d\xb3\x3e\xd8\x8f\x4b\x3b\xdf\xf2\x1d\x77\x1e\x3f\xb8\xd6\xe6\x18\xee\xa5\x14\x8f\x98\xaf\x35\x0b\xed\x1c\x06\xd1\x78\xed\x86\x59\x25\xf0\x5f\x3d\xb5\xfc\x52\x0f\x5b\x88\x00\x8e\x69\xe5\x3d\xaa\xa0\x5c\x81\x12\x0e\xcf\x2a\x02\xb0\x2a\xd4\xda\x49\x48\xb3\xde\xce\x5b\xfa\xb0\x1e\xc2\xd2\xd3\x29\xa0\xdf\xac\x4a\xa3\x29\xb3\x68\xf7\x37\x00\x00\xff\xff\xeb\xd9\x14\xca\xbb\x03\x00\x00")

func staticMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticMainCss,
		"static/main.css",
	)
}

func staticMainCss() (*asset, error) {
	bytes, err := staticMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.css", size: 955, mode: os.FileMode(420), modTime: time.Unix(1522665229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5d\x6f\x9c\x46\x17\xbe\xdf\x5f\x71\x5e\x12\x09\x36\xbb\x86\xf5\xdb\x36\x52\xb1\x36\x55\x9b\x28\xea\x45\xa3\x54\x8d\x1b\xa9\x8a\x7c\x31\x86\xc3\x42\x0d\x33\x68\xe6\xe0\x64\x15\xf9\xbf\x57\x33\xc0\x32\xc0\xe0\xb8\xa9\x22\xd9\x17\xde\x1d\xe6\x39\x9f\x3c\xe7\x63\xdf\x37\x18\x26\xa2\xaa\x05\x47\x4e\x81\x7f\xdd\xa4\x07\xa4\xb3\xb4\x50\x75\xc9\x8e\xfe\x16\x3e\xaf\x00\x00\x08\xab\xba\x64\x84\x31\x78\x4f\x5a\x88\xb7\x35\x17\x29\x23\x16\x43\xd6\xf0\x84\x0a\xc1\x21\x58\x77\x02\xfa\x4f\x22\x35\x92\x5b\x0f\xf4\xdf\x35\x2b\x19\x4f\x30\x86\x5d\xb8\xdb\x8e\x6e\x52\x56\x94\x47\xc7\x73\x89\x15\x2b\x78\xc1\x0f\xaf\xd8\x51\xc5\xb0\x3b\x5d\xde\x5d\x98\xaf\x77\x2d\x3c\x91\xc8\x08\xd3\xc1\x99\x91\x2f\x94\x17\x2a\x7c\x2a\x78\xe0\x37\x75\xca\x08\xfd\xed\x82\xd3\x27\x70\x86\x94\xe4\xbf\x98\x58\x83\xf5\xc5\x60\xd4\xfa\xbe\x84\xeb\x3c\xaa\x90\x72\x91\xaa\xd8\xd2\x1e\x45\x70\xf9\xf6\xd5\x5b\x78\xf3\x1b\x24\xa2\xaa\x04\x87\x46\x61\x0a\x12\x33\x96\x90\x90\xff\x3b\x01\x0f\x48\xaf\x18\xe1\xef\x8c\xf2\x99\x7b\xb7\x4c\x42\x0a\x7b\xe0\xf8\x11\x34\xc8\x76\xcf\xca\x7b\x90\x86\x07\xa4\xbf\x90\xc9\x60\x0d\x1b\x38\xff\x71\xb7\xd3\x9f\x5e\xe4\xc1\xa6\xbb\x7c\x23\xb8\xd1\xbf\x81\x73\x3b\xc4\x21\xff\xa3\xe0\x26\x6e\xb0\x4f\x85\x50\x5a\x4b\xe0\x47\xac\x2e\x22\x92\x8c\x2b\x66\x52\x1a\xf9\xb0\x69\xb3\x33\x8e\x63\x03\x7e\xd4\xd2\xc7\x5f\x87\x94\x23\x0f\x24\xaa\x5a\x70\x85\xb0\x7f\x31\x51\xdf\x47\xda\xe2\x61\x0f\x3d\x34\xd4\x9c\xbb\x98\x61\x8d\xb9\x8e\x5d\xb0\xef\xc4\xfa\x07\x0b\x70\x43\xb9\x01\x6c\x8e\x0b\xd0\x11\x0b\x07\x91\xd1\xe3\xb1\xe8\xdd\x3c\xa5\x77\x2b\xfd\x70\xb5\xd2\x71\x25\x42\xdc\x14\xf8\xb2\x2f\x3d\xd8\xc3\xa4\x14\x5b\xc0\x59\xc1\xeb\x86\x9c\x85\x68\x03\xbe\xb6\x1c\x15\x26\x12\x29\x86\x86\xa7\x98\x15\x1c\xd3\x79\x75\xb9\x78\xac\x9a\xeb\xaa\xa0\x97\xc6\x81\x00\xa7\xcc\xb0\x58\xfe\x0e\x49\xdb\x68\x24\x02\xe3\x29\x20\xcf\x84\x4c\x10\x72\xa2\x5a\x85\xf3\xa2\x6b\x8b\xb8\xd3\xeb\xb1\x86\x72\x6f\xdb\xde\xb4\x8e\x6e\xe1\xbb\xe7\x3f\x4c\xe8\xce\xea\x3a\x7c\x8a\x55\x41\xa7\xda\x9e\x00\xda\xda\x97\xa2\x21\x94\x61\xdd\xa8\x3c\xf0\x22\xcf\xcd\xf7\x91\x7d\xce\x2a\xdc\xc2\x2d\x2b\x1b\xdc\x42\xca\x8e\xca\x59\x88\x8c\xf0\x9e\x5a\xd4\xd7\xa1\x42\xba\x2c\x2a\x0c\xcc\xe1\xd0\x1d\xd6\xa6\x0a\x35\x99\x9e\xc1\xff\xbf\x87\x67\xf0\x7c\xd7\xff\x3b\xdf\xed\x76\xeb\x89\x22\x6d\x0b\x3f\xd5\x85\x44\xcd\x3e\xef\xa2\x3f\xec\x75\x35\x1b\xc5\x24\xfe\xbc\x7c\xf9\x8e\x64\xc1\x0f\x33\x2f\x44\xd2\x54\xc8\x29\x6c\x29\xa3\xfd\x65\x15\xea\x66\x60\xc4\x4d\x88\xb0\x39\xe9\xdf\x68\xfd\x35\xa3\x7c\x1f\x79\x56\x9a\x46\x14\x9e\x90\xd5\x2a\x7e\xe5\x24\xab\x0d\xe8\xc8\x1a\x45\x50\x4b\x51\xab\x18\x3e\x78\xa3\xeb\xab\xaf\x24\xb3\x96\xbf\xc5\x18\x32\x56\x2a\x1c\x0f\x11\x5b\x7f\x0c\x1f\xae\xa6\x51\x7d\xc3\x19\x72\x69\x99\xfe\xf2\x24\x71\xa1\x97\xe7\xc9\x23\x19\x13\x07\xa4\xd7\x42\x56\x8c\x08\x53\x63\x4a\xa7\xc7\xe5\xcf\x11\x99\x84\x3d\xf4\x85\xf0\xba\x29\xcb\xd6\xf2\x9c\xec\x95\x36\x0a\x7b\x08\xce\x7b\x82\x0f\x9e\xac\x43\x12\x6e\xa6\xf7\x52\xe6\x33\x2c\x91\x1f\x28\x87\x17\x70\x0e\x3f\x75\x57\x31\xf8\x3b\x3d\x9d\xcc\x69\x6e\x35\x65\x47\xcb\xbf\x36\x6d\x8b\xc6\x7a\xf0\x71\x6c\x48\x3f\xee\xcd\xa4\xec\xe8\xcc\xba\xc6\x6c\xc0\x0b\xbd\xb9\x2b\xd3\xf1\x3b\x66\xc4\x7f\x1e\xc2\x0f\x1a\xbc\x46\xcc\xae\x99\x07\xce\x5f\x5b\x24\x94\x78\x8b\x52\xcd\x78\x77\xcf\x5c\x5c\x6e\x2a\xf7\x8c\xc1\x19\xea\x6b\x67\x61\x8a\x2a\x91\x45\xad\xd1\xd6\x40\x1c\xf7\x11\x56\x89\x86\xd3\xe2\xb5\xca\xc5\xc7\x18\x48\x36\xe8\x6e\x30\x8e\x12\x66\x69\xea\x2c\x5d\x85\x65\x06\x7b\x93\xd6\x0b\xc7\x2b\xaf\x85\x72\xbc\xf3\x53\x82\x16\xe3\x6a\xf7\x9e\xe1\xc9\x76\x06\xef\x43\x34\xc8\xf6\x30\x79\x7f\x2d\x83\x86\xcc\xf6\xcc\x98\x86\x01\x0f\x99\xce\x26\x6d\x58\x66\x61\x52\x3a\x3a\x81\x83\x2c\xd0\xee\x1f\x8f\x33\x69\xde\x99\xd7\x57\xdd\x23\x4d\x5d\x87\x75\x8d\x2b\x2b\x42\xd8\x0f\x14\x77\x6c\x53\x6d\x6c\xcb\x20\xbd\x01\xca\x22\xb9\x01\x12\xba\x6f\x20\x45\xc6\x2c\x70\xa6\x27\x34\x5c\x4b\xf1\x51\xa1\x84\x4c\xc8\x4a\x6f\x1f\x45\xca\x8c\x51\x45\xba\xf1\x4e\x35\xbd\xc3\x6e\x61\x8c\xa3\xe8\x5a\x08\x52\x24\x59\x7d\x76\xdb\x60\xf8\xb7\x0a\x85\x3c\x44\xa9\x48\x54\x74\xea\x1b\x2a\xd2\x6a\xa3\xb9\xd3\xba\x38\x61\xdf\x6e\x07\xae\x0d\x91\xe3\x27\xba\x2c\x92\x9b\x20\x58\xdf\xd3\x15\x3b\x2d\xba\xc6\x17\x9a\xe0\x97\x15\x0d\x50\x89\x99\x0a\x4d\xd7\x0a\x33\x91\x34\x6a\xfa\x12\xa7\x2f\x72\x7a\x1e\x2d\x65\xba\x02\x7e\x15\x15\xd6\xec\x80\xf3\xdf\x13\x79\x77\xe3\x6c\xa2\xfd\x65\xd7\x3b\x4f\x7b\x99\x5e\xc1\x91\x53\x91\xe8\xbd\xc8\xbb\xb2\x7e\xbf\x98\x7d\x5a\xcf\x85\x0f\x46\xe2\xb3\x59\x18\x63\xf0\xa3\x76\xc7\xf4\xb7\x70\xb2\x1d\xcf\x7e\xec\x74\x7c\x1c\x84\xc6\xf0\x53\x10\x77\xdb\xd5\xd5\x85\x65\x4f\x76\xfb\xcc\xfb\x06\xff\x30\xe7\xa0\x0d\xa5\x75\x26\xee\x3e\x87\x6c\xb0\xba\x1e\x24\x3a\x2c\x96\x31\xf8\x4f\x58\x5d\xfb\xdb\x41\x56\x76\xb2\xd2\x9e\x1d\x56\x93\xb6\xd3\xd0\x2d\x98\xdf\x72\x71\x4c\x72\x4c\x6e\x7e\xee\x8c\x66\xda\xac\xd1\x79\xcf\xf2\x78\xaf\xc4\xf2\xf4\x59\x10\xfb\xf7\xad\x75\x58\x41\x46\xb9\xf2\xd7\x23\xec\xb4\xfd\xe9\x3c\xbb\x5a\x9f\xe9\x6a\x23\x45\xce\x92\xbb\x9b\x68\x4f\x18\x25\xb9\xa5\x1e\xa5\x14\xf2\xc1\xfa\x1d\x8d\x61\x61\x57\x59\xad\xfe\x09\x00\x00\xff\xff\x90\xad\xfe\xf2\x37\x13\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 4919, mode: os.FileMode(420), modTime: time.Unix(1522988591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x41\x8f\xd3\x30\x10\x85\xef\xf9\x15\xef\xb6\xad\x14\xb7\xda\x4a\xa8\x88\x3d\x85\x76\xba\x8a\x68\xd3\xc5\x71\xd1\xee\x09\x59\xc9\x64\x6b\x91\xd8\x59\xdb\x61\xd9\x7f\x8f\x92\x16\x0e\x08\x71\xc1\x27\x6b\x9e\x3f\xbf\x99\x79\x42\x40\xb2\xae\x71\x8e\xb1\x0f\x1f\x96\xcb\x10\x75\xf5\xcd\x7d\x67\xdf\xb4\xee\x75\x51\xb9\x6e\xf9\x32\x70\x88\xc6\xd9\xb0\x5c\xdd\xae\xdf\xad\xd7\xab\xd5\xf2\xec\x5e\x45\x74\x62\x08\x2c\xc2\x4b\x6b\x22\x8b\x9a\x2b\xd3\xe9\x56\xf4\x9e\x2b\x13\x8c\xb3\xc2\xba\xa8\x47\x2c\x11\x02\x8d\xf3\xd0\x16\xc6\x46\xf6\xe3\x67\xf6\x19\xfc\xa3\x6f\xb5\x9d\x5e\xc0\x35\x28\x3f\xef\x4d\xe4\x80\x5a\x47\x1d\xdf\x7a\x0e\x29\x8c\x45\xaf\x7d\x34\xd5\xd0\x6a\x0f\xdd\x34\xc6\x9a\x68\x38\x2c\x92\x64\x23\x29\x53\x04\x95\x7d\xdc\x13\xf2\x1d\x8a\xa3\x02\x3d\xe6\xa5\x2a\x31\x04\xf6\x01\xb3\x04\x00\x4c\x8d\xdf\x27\x2f\x14\xdd\x93\xc4\x83\xcc\x0f\x99\x7c\xc2\x27\x7a\x42\x76\x52\xc7\xbc\xd8\x48\x3a\x50\xa1\x52\x4c\xcc\xc8\x5b\xdd\xf1\x78\x57\xf4\xa8\x92\xf9\xdd\x3f\xfd\xa2\xd7\x36\xe8\x6a\x5a\xd0\x7f\xda\xfe\xe2\xae\x4c\x3a\x09\x42\x60\xe7\x3c\x58\x07\xc3\x1e\x8d\x69\x23\x7b\x63\x9f\x27\xed\x8d\xb5\xff\xc3\xe8\x02\x75\xce\xc6\xf3\xdf\x84\x68\x3a\x0e\x51\x77\x3d\x80\x6d\xa6\x48\xe5\x07\xc2\x96\x76\xd9\x69\xaf\xb0\x39\x49\x49\x85\xfa\x3a\x16\x4b\x95\x1d\x1e\xd2\x64\x82\x6a\x0e\x95\x37\xfd\x14\xd5\xb8\x92\x6b\xcb\xba\x73\x83\x8d\x17\x93\x2d\x6d\xf2\x43\xb6\x9f\xbd\x4f\x57\xf3\x8b\xd3\xee\x28\x29\xbf\x2f\xc6\x81\x67\x97\xe1\xe6\x90\xb4\x23\x49\xc5\x86\xae\x31\xcd\x4c\x3d\x1f\xd7\x2b\x04\xb2\xba\x46\xcd\x8d\x1e\xda\x38\x69\x8b\x24\x2f\x4a\x92\x6a\x6c\xff\x78\x0d\xf5\x4b\xb6\x3f\x51\x89\xd9\x6d\x8a\x9b\xb1\x72\x33\xbf\xfb\x19\x00\x00\xff\xff\x86\x33\xe6\x52\xbe\x02\x00\x00")

func initSqlBytes() ([]byte, error) {
	return bindataRead(
		_initSql,
		"init.sql",
	)
}

func initSql() (*asset, error) {
	bytes, err := initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init.sql", size: 702, mode: os.FileMode(420), modTime: time.Unix(1521176180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.css": staticMainCss,
	"static/main.js": staticMainJs,
	"init.sql": initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init.sql": &bintree{initSql, map[string]*bintree{}},
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.css": &bintree{staticMainCss, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

